package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"time"

	"github.com/talgat-ruby/planets-fact-site-graphql/graph/generated"
	"github.com/talgat-ruby/planets-fact-site-graphql/pkg/utils"
)

// Ping is the resolver for the ping field.
func (r *subscriptionResolver) Ping(ctx context.Context) (<-chan *string, error) {
	r.Log.InfoContext(ctx, "start subscription Ping")

	msg := make(chan *string)

	go func() {
		for i := 1; i <= 5; i++ {
			msg <- utils.ToPtr(fmt.Sprintf("Pong-%d", i))
			time.Sleep(time.Duration(i) * time.Second)
		}
		msg <- utils.ToPtr("Done")
		close(msg)
		r.Log.InfoContext(ctx, "end subscription Ping")
	}()

	return msg, nil
}

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
