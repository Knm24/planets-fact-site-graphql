version: "3.6"
services:
  companydb:
    container_name: company-postgres
    image: postgres:alpine
    restart: always
    volumes:
      - ./company/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=$COMPANY_DB_NAME
      - POSTGRES_USER=$COMPANY_DB_USER
      - POSTGRES_PASSWORD=$COMPANY_DB_PASSWORD
    ports:
      - $COMPANY_DB_PORT:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${COMPANY_DB_NAME} -h ${COMPANY_DB_HOST} -U ${COMPANY_DB_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - company-networks
  planetdb:
    container_name: planet-postgres
    image: postgres:alpine
    restart: always
    volumes:
      - ./planet/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=$PLANET_DB_NAME
      - POSTGRES_USER=$PLANET_DB_USER
      - POSTGRES_PASSWORD=$PLANET_DB_PASSWORD
    ports:
      - $PLANET_DB_PORT:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${PLANET_DB_NAME} -h ${PLANET_DB_HOST} -U ${PLANET_DB_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - planet-networks

  graphql-engine:
    image: hasura/graphql-engine:latest
    ports:
      - $HASURA_PORT:8080
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: "postgres://${COMPANY_DB_USER}:${COMPANY_DB_PASSWORD}@${COMPANY_DB_HOST}:5432/${COMPANY_DB_NAME}"
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      COMPANY_DATABASE_URL: "postgres://${COMPANY_DB_USER}:${COMPANY_DB_PASSWORD}@${COMPANY_DB_HOST}:5432/${COMPANY_DB_NAME}"
      PLANET_DATABASE_URL: "postgres://${PLANET_DB_USER}:${PLANET_DB_PASSWORD}@${PLANET_DB_HOST}:5432/${PLANET_DB_NAME}"
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
    networks:
      - company-networks
      - planet-networks
    depends_on:
      data-connector-agent:
        condition: service_healthy
      companydb:
        condition: service_healthy
      planetdb:
        condition: service_healthy
  hasura-cli:
    container_name: hasura-cli
    restart: unless-stopped
    build:
      context: ./cli
    environment:
      HASURA_GRAPHQL_ENDPOINT: http://graphql-engine:8080
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
    volumes:
      - ./hasura:/app
    networks:
      - company-networks
      - planet-networks
    depends_on:
      - graphql-engine
    command: tail -F anything
  data-connector-agent:
    image: hasura/graphql-data-connector:v2.37.1
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
networks:
  company-networks:
  planet-networks:
volumes:
  db_data:
